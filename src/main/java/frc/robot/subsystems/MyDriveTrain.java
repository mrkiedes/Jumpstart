// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class MyDriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX talonSRX1;
private WPI_TalonSRX talonSRX2;
private MotorControllerGroup leftMotors;
private WPI_TalonSRX talonSRX3;
private WPI_TalonSRX talonSRX4;
private MotorControllerGroup rightMotors;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public MyDriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonSRX1 = new WPI_TalonSRX(1);
 
 

talonSRX2 = new WPI_TalonSRX(2);
 
 

leftMotors = new MotorControllerGroup(talonSRX1, talonSRX2  );
 addChild("Left Motors",leftMotors);
 

talonSRX3 = new WPI_TalonSRX(3);
 
 

talonSRX4 = new WPI_TalonSRX(4);
 
 

rightMotors = new MotorControllerGroup(talonSRX3, talonSRX4  );
 addChild("Right Motors",rightMotors);
 

differentialDrive1 = new DifferentialDrive(leftMotors, rightMotors);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void myDriveArcade(double xSpeed, double zRotation){
        differentialDrive1.arcadeDrive(xSpeed, zRotation);
    }
    /*
    public void myEncoderReset(){
        encoder.reset();
    }

    public double myGetEncoderDistance(){
        return encoder.getDistance();
    }
    */
}

